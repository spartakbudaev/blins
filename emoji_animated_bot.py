#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Telegram –±–æ—Ç "–ë–ª–∏–Ω–Ω–∞—è –±–∞—à–Ω—è" —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ–¥–∑–∏
"""

import os
import logging
import time
import random
import threading
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –∏ –∏—Ö –ø–æ—Ç–æ–∫–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏
active_games = {}
animation_threads = {}

# –≠–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
PANCAKE_EMOJI = "ü•û"
PLATE_EMOJI = "üçΩÔ∏è"
ARROW_LEFT = "‚¨ÖÔ∏è"
ARROW_RIGHT = "‚û°Ô∏è"

class EmojiPancakeGame:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä—ã '–ë–ª–∏–Ω–Ω–∞—è –±–∞—à–Ω—è' —Å —ç–º–æ–¥–∑–∏"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã"""
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã
        self.score = 0
        self.game_over = False
        self.message_id = None
        self.chat_id = None
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
        self.width = 10  # –®–∏—Ä–∏–Ω–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –≤ —Å–∏–º–≤–æ–ª–∞—Ö
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–ª–∏–Ω–æ–≤
        self.pancakes = []  # –£–ª–æ–∂–µ–Ω–Ω—ã–µ –±–ª–∏–Ω—ã
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–≤–∏–∂—É—â–µ–≥–æ—Å—è –±–ª–∏–Ω–∞
        self.current_pancake = {
            "x": 0,  # –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è X
            "width": 5,  # –ù–∞—á–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –±–ª–∏–Ω–∞ (–≤ —Å–∏–º–≤–æ–ª–∞—Ö)
            "direction": 1  # 1 - –≤–ø—Ä–∞–≤–æ, -1 - –≤–ª–µ–≤–æ
        }
    
    def update_moving_pancake(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–≤–∏–∂—É—â–µ–≥–æ—Å—è –±–ª–∏–Ω–∞"""
        # –ï—Å–ª–∏ –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if self.game_over:
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –±–ª–∏–Ω–∞
        self.current_pancake["x"] += self.current_pancake["direction"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥ –ª–∏ –±–ª–∏–Ω –∫—Ä–∞—è —ç–∫—Ä–∞–Ω–∞
        if self.current_pancake["x"] <= 0:
            self.current_pancake["x"] = 0
            self.current_pancake["direction"] = 1  # –ú–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤–ø—Ä–∞–≤–æ
        elif self.current_pancake["x"] + self.current_pancake["width"] >= self.width:
            self.current_pancake["x"] = self.width - self.current_pancake["width"]
            self.current_pancake["direction"] = -1  # –ú–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤–ª–µ–≤–æ
    
    def drop_pancake(self):
        """–û–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–ª–∏–Ω –Ω–∞ –±–∞—à–Ω—é"""
        # –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –æ–∫–æ–Ω—á–µ–Ω–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if self.game_over:
            return True
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–ª–∏–Ω–∞
        if not self.pancakes:
            # –ü–µ—Ä–≤—ã–π –±–ª–∏–Ω
            pancake_x = self.current_pancake["x"]
            pancake_width = self.current_pancake["width"]
        else:
            # –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –±–ª–∏–Ω—ã
            prev_pancake = self.pancakes[-1]
            pancake_x = self.current_pancake["x"]
            pancake_width = self.current_pancake["width"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ –±–ª–∏–Ω –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –±–ª–∏–Ω–æ–º
            overlap_left = max(pancake_x, prev_pancake["x"])
            overlap_right = min(pancake_x + pancake_width, prev_pancake["x"] + prev_pancake["width"])
            
            if overlap_right <= overlap_left:
                # –ë–ª–∏–Ω—ã –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç—Å—è - –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
                self.game_over = True
                return True
            
            # –ï—Å–ª–∏ –±–ª–∏–Ω —á–∞—Å—Ç–∏—á–Ω–æ —Å–≤–∏—Å–∞–µ—Ç, —É–º–µ–Ω—å—à–∞–µ–º –µ–≥–æ —à–∏—Ä–∏–Ω—É
            if pancake_x < prev_pancake["x"] or (pancake_x + pancake_width) > (prev_pancake["x"] + prev_pancake["width"]):
                # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é —à–∏—Ä–∏–Ω—É –∏ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –±–ª–∏–Ω–∞
                new_width = overlap_right - overlap_left
                new_x = overlap_left
                
                # –ï—Å–ª–∏ –±–ª–∏–Ω —Å—Ç–∞–ª —Å–ª–∏—à–∫–æ–º —É–∑–∫–∏–º, –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
                if new_width < 1:
                    self.game_over = True
                    return True
                
                pancake_width = new_width
                pancake_x = new_x
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–∏–Ω –≤ –±–∞—à–Ω—é
        self.pancakes.append({
            "x": pancake_x,
            "width": pancake_width
        })
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç
        self.score += 1
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–≤–∏–∂—É—â–∏–π—Å—è –±–ª–∏–Ω
        self.current_pancake = {
            "x": random.randint(0, self.width - pancake_width),
            "width": pancake_width,  # –®–∏—Ä–∏–Ω–∞ —Ä–∞–≤–Ω–∞ —à–∏—Ä–∏–Ω–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –±–ª–∏–Ω–∞
            "direction": random.choice([-1, 1])  # –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∞ –ª–∏ –±–∞—à–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç—ã
        if len(self.pancakes) >= 15:
            self.game_over = True
            return True
        
        return False
    
    def generate_game_text(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã —Å —ç–º–æ–¥–∑–∏"""
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        field = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–∏–∂—É—â–∏–π—Å—è –±–ª–∏–Ω, –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –æ–∫–æ–Ω—á–µ–Ω–∞
        if not self.game_over:
            moving_line = " " * self.current_pancake["x"] + PANCAKE_EMOJI * self.current_pancake["width"] + " " * (self.width - self.current_pancake["x"] - self.current_pancake["width"])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
            if self.current_pancake["direction"] > 0:
                direction_indicator = ARROW_RIGHT
            else:
                direction_indicator = ARROW_LEFT
            
            field.append(moving_line + " " + direction_indicator)
        else:
            field.append(" " * self.width)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–µ–∂–¥—É –¥–≤–∏–∂—É—â–∏–º—Å—è –±–ª–∏–Ω–æ–º –∏ –±–∞—à–Ω–µ–π
        empty_lines = max(0, 10 - len(self.pancakes))
        for _ in range(empty_lines):
            field.append(" " * self.width)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–∏–Ω—ã –≤ –±–∞—à–Ω–µ (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑)
        for pancake in reversed(self.pancakes):
            pancake_line = " " * pancake["x"] + PANCAKE_EMOJI * pancake["width"] + " " * (self.width - pancake["x"] - pancake["width"])
            field.append(pancake_line)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞—Ä–µ–ª–∫—É
        field.append(PLATE_EMOJI)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
        return "\n".join(field)

def start_animation(user_id, context):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –¥–≤–∏–∂–µ–Ω–∏—è –±–ª–∏–Ω–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in active_games or active_games[user_id].game_over:
        return
    
    game = active_games[user_id]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –±–ª–∏–Ω–∞
    game.update_moving_pancake()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    game_text = game.generate_game_text()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
    try:
        context.bot.edit_message_text(
            chat_id=game.chat_id,
            message_id=game.message_id,
            text=f"{game_text}\n\n–°—á—ë—Ç: {game.score}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ò–≥—Ä–∞—Ç—å", callback_data="play_game")]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 0.5 —Å–µ–∫—É–Ω–¥—ã
    if user_id in animation_threads and animation_threads[user_id].is_alive():
        animation_threads[user_id] = threading.Timer(0.5, start_animation, args=[user_id, context])
        animation_threads[user_id].daemon = True
        animation_threads[user_id].start()

def start(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    user = update.effective_user
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–ë–ª–∏–Ω–Ω–∞—è –±–∞—à–Ω—è'!\n\n"
        f"–ù–∞–∂–º–∏ /play, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É."
    )

def play_command(update: Update, context: CallbackContext) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /play."""
    user_id = update.effective_user.id
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
    stop_animation(user_id)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_games[user_id] = EmojiPancakeGame()
    game = active_games[user_id]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    game_text = game.generate_game_text()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ò–≥—Ä–∞—Ç—å"
    keyboard = [
        [InlineKeyboardButton("–ò–≥—Ä–∞—Ç—å", callback_data="play_game")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    message = update.message.reply_text(
        f"{game_text}\n\n–°—á—ë—Ç: {game.score}",
        reply_markup=reply_markup
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    game.message_id = message.message_id
    game.chat_id = update.effective_chat.id
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    animation_threads[user_id] = threading.Timer(0.5, start_animation, args=[user_id, context])
    animation_threads[user_id].daemon = True
    animation_threads[user_id].start()

def stop_animation(user_id):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in animation_threads and animation_threads[user_id].is_alive():
        animation_threads[user_id].cancel()
        del animation_threads[user_id]

def button_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    query.answer()
    
    user_id = update.effective_user.id
    
    if query.data == "play_game":
        if user_id in active_games:
            game = active_games[user_id]
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            stop_animation(user_id)
            
            # –û–ø—É—Å–∫–∞–µ–º –±–ª–∏–Ω
            game_over = game.drop_pancake()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            game_text = game.generate_game_text()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
            keyboard = [
                [InlineKeyboardButton("–ò–≥—Ä–∞—Ç—å", callback_data="play_game")]
            ]
            
            if game_over:
                keyboard = [
                    [InlineKeyboardButton("–ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="new_game")]
                ]
                caption = f"{game_text}\n\nüí• –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! üí•\n–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç: {game.score}"
            else:
                caption = f"{game_text}\n\n–°—á—ë—Ç: {game.score}"
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –æ–∫–æ–Ω—á–µ–Ω–∞
                animation_threads[user_id] = threading.Timer(0.5, start_animation, args=[user_id, context])
                animation_threads[user_id].daemon = True
                animation_threads[user_id].start()
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã
            context.bot.edit_message_text(
                chat_id=game.chat_id,
                message_id=game.message_id,
                text=caption,
                reply_markup=reply_markup
            )
    
    elif query.data == "new_game":
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        stop_animation(user_id)
        
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
        active_games[user_id] = EmojiPancakeGame()
        game = active_games[user_id]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        game_text = game.generate_game_text()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ò–≥—Ä–∞—Ç—å"
        keyboard = [
            [InlineKeyboardButton("–ò–≥—Ä–∞—Ç—å", callback_data="play_game")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã
        context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=query.message.message_id,
            text=f"{game_text}\n\n–°—á—ë—Ç: {game.score}",
            reply_markup=reply_markup
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        game.message_id = query.message.message_id
        game.chat_id = update.effective_chat.id
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        animation_threads[user_id] = threading.Timer(0.5, start_animation, args=[user_id, context])
        animation_threads[user_id].daemon = True
        animation_threads[user_id].start()

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    token = os.getenv("BOT_TOKEN")
    if not token:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        exit(1)
    
    # –°–æ–∑–¥–∞–µ–º Updater –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    updater = Updater(token)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dispatcher = updater.dispatcher
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("play", play_command))
    dispatcher.add_handler(CallbackQueryHandler(button_callback))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("=" * 50)
    print("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ '–ë–ª–∏–Ω–Ω–∞—è –±–∞—à–Ω—è' —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ–¥–∑–∏")
    print("=" * 50)
    print("\n–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Ctrl+C
    updater.idle()

if __name__ == "__main__":
    main() 